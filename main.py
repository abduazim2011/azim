"""
First Comment Userbot (—Å –∑–∞—Ö–æ–¥–æ–º –≤ —Å–≤—è–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É)

üìå –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ—Å–∏—Ç —É–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª (username –±–µ–∑ @).
- –ü—Ä–∏ /on –Ω–∞—Ö–æ–¥–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –≤—Å—Ç—É–ø–∞–µ—Ç –≤ –Ω–µ—ë –∏ —Å–ª—É—à–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã.
- –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø–æ—Å—Ç ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–∑ Saved Messages.

üß∞ –ö–æ–º–∞–Ω–¥—ã:
  /set_text <—Ç–µ–∫—Å—Ç> ‚Äî –∑–∞–¥–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  /text             ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
  /on               ‚Äî –≤–∫–ª—é—á–∏—Ç—å —é–∑–µ—Ä–±–æ—Ç
  /off              ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å
  /status           ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  /ch <username>    ‚Äî —Å–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª
  /help             ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞
"""

import asyncio
from telethon import TelegramClient, events
from telethon.tl.functions.channels import GetFullChannelRequest, JoinChannelRequest
import time

# üî¥ –í—Å—Ç–∞–≤—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
API_ID = 25165568
API_HASH = "0f13997a616a03ccd368f3c0f794208c"
SESSION_NAME = "first_comment_userbot"

client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

channel_username = None
linked_chat_id = None
current_text = ""
enabled = False


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ ---
async def is_owner(event):
    me = await client.get_me()
    return event.sender_id == me.id


# --- –ö–æ–º–∞–Ω–¥—ã ---
@client.on(events.NewMessage(pattern="/set_text (.+)"))
async def set_text(event):
    if not await is_owner(event):
        return
    global current_text
    current_text = event.pattern_match.group(1)
    await event.respond(f"‚úÖ –¢–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {current_text}")


@client.on(events.NewMessage(pattern="/text"))
async def show_text(event):
    if not await is_owner(event):
        return
    await event.respond(f"üìù –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: {current_text or '‚ùå –Ω–µ –∑–∞–¥–∞–Ω'}")


@client.on(events.NewMessage(pattern="/on"))
async def turn_on(event):
    if not await is_owner(event):
        return
    global enabled, linked_chat_id
    enabled = True
    await event.respond("‚úÖ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω")

    if channel_username:
        try:
            full = await client(GetFullChannelRequest(channel_username))
            if full.full_chat.linked_chat_id:
                linked_chat_id = full.full_chat.linked_chat_id
                try:
                    await client(JoinChannelRequest(linked_chat_id))
                    print("‚úÖ –í–æ—à—ë–ª –≤ —Å–≤—è–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
                except Exception as e:
                    print("‚ö†Ô∏è –£–∂–µ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –æ—à–∏–±–∫–∞:", e)
            else:
                print("‚ùå –£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ –æ –∫–∞–Ω–∞–ª–µ:", e)


@client.on(events.NewMessage(pattern="/off"))
async def turn_off(event):
    if not await is_owner(event):
        return
    global enabled
    enabled = False
    await event.respond("‚õî –ë–æ—Ç –≤—ã–∫–ª—é—á—ë–Ω")


@client.on(events.NewMessage(pattern="/status"))
async def status(event):
    if not await is_owner(event):
        return
    msg = f"üì° –ö–∞–Ω–∞–ª: {channel_username or '‚ùå –Ω–µ –≤—ã–±—Ä–∞–Ω'}\n"
    msg += f"üí¨ –¢–µ–∫—Å—Ç: {current_text or '‚ùå –Ω–µ –∑–∞–¥–∞–Ω'}\n"
    msg += f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {'‚úÖ –í–ö–õ' if enabled else '‚õî –í–´–ö–õ'}"
    await event.respond(msg)


@client.on(events.NewMessage(pattern="/ch (.+)"))
async def set_channel(event):
    if not await is_owner(event):
        return
    global channel_username, linked_chat_id
    channel_username = event.pattern_match.group(1).lstrip("@")
    linked_chat_id = None
    await event.respond(f"üì° –ö–∞–Ω–∞–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {channel_username}")


@client.on(events.NewMessage(pattern="/help"))
async def help_cmd(event):
    if not await is_owner(event):
        return
    await event.respond(
        "üß∞ –ö–æ–º–∞–Ω–¥—ã:\n"
        "/set_text <—Ç–µ–∫—Å—Ç> ‚Äî –∑–∞–¥–∞—Ç—å —Ç–µ–∫—Å—Ç\n"
        "/text ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç\n"
        "/on ‚Äî –≤–∫–ª—é—á–∏—Ç—å\n"
        "/off ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å\n"
        "/ch <username> ‚Äî —Å–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )


# --- –õ–æ–≥–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ---
@client.on(events.NewMessage)
async def first_comment(event):
    global enabled, channel_username, current_text, linked_chat_id
    if not enabled or not current_text or not channel_username:
        return

    # –ù–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç –∫–∞–Ω–∞–ª–∞
    if event.is_channel and event.chat and event.chat.username == channel_username and not event.fwd_from:
        try:
            start_time = time.perf_counter()
            if linked_chat_id:
                await client.send_message(entity=linked_chat_id, message=current_text, reply_to=event.id)
            else:
                await client.send_message(entity=event.chat, message=current_text, comment_to=event.id)

            elapsed = (time.perf_counter() - start_time) * 1000
            print(f"‚ö° –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∑–∞ {elapsed:.2f} –º—Å: {current_text}")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å:", e)


# --- –°—Ç–∞—Ä—Ç ---
async def main():
    global channel_username
    await client.start()
    channel_username = input("–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ @): ").strip()
    print("–ó–∞–ø—É—â–µ–Ω–æ... /help –¥–ª—è –∫–æ–º–∞–Ω–¥")
    await client.run_until_disconnected()


if __name__ == "__main__":
    asyncio.run(main())
